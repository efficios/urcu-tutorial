RCU exercises
Mathieu Desnoyers, October 17th, 2013


* Exercise 1

Unbalanced RCU read-side lock. Experience hang with: menu/god/create
gerbil, followed by exiting all menus, and then quitting the game (q).

Debug with gdb, explain lockup scenario.


* Exercise 2

Modify game configuration to use call_rcu() worker thread rather than
synchronize_rcu() for reclaim.


* Exercise 3

Debug deadlock involving RCU and mutexes.

Thread A:
  - do_root_menu()
    - lock print_output_mutex
    - call do_config()
      - call urcu_game_config_update_end()
        - call synchronize_rcu()
        - waits for RCU read-side critical sections

Thread B:
  - output_thread_fct()
    - rcu_read_lock()
    - lock print_output_mutex


* Exercise 4

Modify game to use QSBR (urcu-qsbr.h) flavor rather than read lock
(urcu.h) flavor.


* Exercise 5

Implement a RCU list of most recently born living animals. Last 3
animals' key are printed in output summary (RCU read-side).

* Exercise 6

Diagnose a race condition. The race condition is due to a reversed order
of removal from the "all" hash table vs "per kind" hash table, not
matching the expected logic in try_birth().

Diagnosing this issue requires stress-tests: small hash table, very
frequent updates.
