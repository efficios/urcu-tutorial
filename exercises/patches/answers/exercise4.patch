diff -urN urcu-tutorial/urcu-game/dispatch-thread.c urcu-tutorial/urcu-game-qsbr/dispatch-thread.c
--- urcu-tutorial/urcu-game/dispatch-thread.c	2013-10-17 20:47:40.637587574 -0400
+++ urcu-tutorial/urcu-game-qsbr/dispatch-thread.c	2013-10-17 20:47:04.613637893 -0400
@@ -15,7 +15,7 @@
 
 #include <unistd.h>
 #include <urcu/system.h>
-#include <urcu.h>
+#include <urcu-qsbr.h>
 #include <poll.h>
 #include "urcu-game.h"
 #include "urcu-game-config.h"
@@ -32,10 +32,10 @@
 	uint64_t island_size;
 	int ret;
 
-	rcu_read_lock();
+	rcu_read_lock();	/* no-op */
 	config = urcu_game_config_get();
 	island_size = config->island_size;
-	rcu_read_unlock();
+	rcu_read_unlock();	/* no-op */
 
 	nr_threads = get_nr_worker_threads();
 	for (i = 0; i < nr_threads; i++) {
@@ -68,13 +68,14 @@
 		DBG("Dispatch.");
 		do_dispatch();
 
-		rcu_read_lock();
+		rcu_read_lock();	/* no-op */
 		config = urcu_game_config_get();
 		step_delay = config->step_delay;
-		rcu_read_unlock();
+		rcu_read_unlock();	/* no-op */
 
 		/* sleep number of ms */
 		poll(NULL, 0, step_delay);
+		rcu_quiescent_state();
 	}
 
 	/* Send worker thread stop message */
diff -urN urcu-tutorial/urcu-game/Makefile urcu-tutorial/urcu-game-qsbr/Makefile
--- urcu-tutorial/urcu-game/Makefile	2013-10-17 20:47:40.637587574 -0400
+++ urcu-tutorial/urcu-game-qsbr/Makefile	2013-10-17 20:47:04.613637893 -0400
@@ -13,7 +13,7 @@
 
 CC = gcc
 CFLAGS = -g -O2 -Wall
-LIBS = -lurcu -lurcu-cds
+LIBS = -lurcu-qsbr -lurcu-cds
 
 HEADERS = urcu-game.h urcu-game-config.h worker-thread.h ht-hash.h
 
diff -urN urcu-tutorial/urcu-game/print-output.c urcu-tutorial/urcu-game-qsbr/print-output.c
--- urcu-tutorial/urcu-game/print-output.c	2013-10-17 20:47:40.641587568 -0400
+++ urcu-tutorial/urcu-game-qsbr/print-output.c	2013-10-17 20:47:04.613637893 -0400
@@ -17,7 +17,7 @@
 #include <stdio.h>
 #include <inttypes.h>
 #include <urcu/system.h>
-#include <urcu.h>
+#include <urcu-qsbr.h>
 #include <urcu/rculfhash.h>
 #include "urcu-game.h"
 #include "urcu-game-config.h"
@@ -37,7 +37,7 @@
 	uint64_t count;
 	struct urcu_game_config *config;
 
-	rcu_read_lock();
+	rcu_read_lock();	/* no-op */
 
 	config = urcu_game_config_get();
 
@@ -68,7 +68,7 @@
 	pthread_mutex_unlock(&vegetation.lock);
 	printf("-------- (type 'm' for menu, 'q' to quit game) -------\n");
 
-	rcu_read_unlock();
+	rcu_read_unlock();	/* no-op */
 }
 
 static
@@ -77,13 +77,22 @@
 	DBG("In user output thread.");
 	rcu_register_thread();
 
+	/*
+	 * print_output_mutex is held while calling synchronize_rcu(),
+	 * therefore, the thread needs to be offline while taking
+	 * print_output_mutex.
+	 */
+	rcu_thread_offline();
+
 	/* Read keys typed by the user */
 	while (!CMM_LOAD_SHARED(exit_program)) {
 		if (!CMM_LOAD_SHARED(hide_output)) {
 			pthread_mutex_lock(&print_output_mutex);
 			DBG("Refresh screen.");
 
+			rcu_thread_online();
 			do_print_output();
+			rcu_thread_offline();
 
 			fflush(stdout);
 			pthread_mutex_unlock(&print_output_mutex);
diff -urN urcu-tutorial/urcu-game/urcu-game.c urcu-tutorial/urcu-game-qsbr/urcu-game.c
--- urcu-tutorial/urcu-game/urcu-game.c	2013-10-17 20:47:40.641587568 -0400
+++ urcu-tutorial/urcu-game-qsbr/urcu-game.c	2013-10-17 20:47:04.617637889 -0400
@@ -14,7 +14,7 @@
  */
 
 #include <stdio.h>
-#include <urcu.h>
+#include <urcu-qsbr.h>
 #include <time.h>
 #include <inttypes.h>
 #include "urcu-game.h"
@@ -160,6 +160,12 @@
 	if (err)
 		goto end;
 
+	/*
+	 * Thread should be in extended quiescent state while waiting
+	 * for other threads to terminate.
+	 */
+	rcu_thread_offline();
+
 	err = join_dispatch_thread();
 	if (err)
 		goto end;
@@ -176,6 +182,8 @@
 	if (err)
 		goto end;
 
+	rcu_thread_online();
+
 	/*
 	 * Kill all animals. After all threads have been joined.
 	 */
diff -urN urcu-tutorial/urcu-game/urcu-game-config.c urcu-tutorial/urcu-game-qsbr/urcu-game-config.c
--- urcu-tutorial/urcu-game/urcu-game-config.c	2013-10-17 20:47:40.641587568 -0400
+++ urcu-tutorial/urcu-game-qsbr/urcu-game-config.c	2013-10-17 20:47:04.617637889 -0400
@@ -16,7 +16,7 @@
 #include <pthread.h>
 #include <stdlib.h>
 #include <string.h>
-#include <urcu.h>
+#include <urcu-qsbr.h>
 #include <urcu/compiler.h>
 
 #include "urcu-game-config.h"
diff -urN urcu-tutorial/urcu-game/urcu-game-logic.c urcu-tutorial/urcu-game-qsbr/urcu-game-logic.c
--- urcu-tutorial/urcu-game/urcu-game-logic.c	2013-10-17 20:47:40.641587568 -0400
+++ urcu-tutorial/urcu-game-qsbr/urcu-game-logic.c	2013-10-17 20:47:04.621637883 -0400
@@ -14,7 +14,7 @@
  */
 
 #include <pthread.h>
-#include <urcu.h>
+#include <urcu-qsbr.h>
 #include <inttypes.h>
 #include <string.h>
 #include "urcu-game.h"
diff -urN urcu-tutorial/urcu-game/user-input.c urcu-tutorial/urcu-game-qsbr/user-input.c
--- urcu-tutorial/urcu-game/user-input.c	2013-10-17 20:47:40.641587568 -0400
+++ urcu-tutorial/urcu-game-qsbr/user-input.c	2013-10-17 20:47:04.617637889 -0400
@@ -19,7 +19,7 @@
 #include <termios.h>
 #include <inttypes.h>
 #include <limits.h>
-#include <urcu.h>
+#include <urcu-qsbr.h>
 #include <urcu/system.h>
 #include "urcu-game.h"
 #include "urcu-game-config.h"
@@ -30,6 +30,7 @@
 /*
  * Read characters from terminal, without awaiting for newline and
  * without echo. Return 0 if OK, -1 on end of file or error.
+ * getch() is a RCU quiescent state.
  */
 static
 int getch(char *_key)
@@ -53,9 +54,13 @@
 		ret = -1;
 		goto end;
 	}
+
+	rcu_thread_offline();
 	do {
 		len = read(0, &key, sizeof(key));
 	} while (len < 0 && errno == EINTR);
+	rcu_thread_online();
+
 	if (len < 0) {
 		perror("read()");
 		ret = -1;
@@ -75,6 +80,7 @@
 	return ret;
 }
 
+/* readline_unbuf() is a RCU quiescent state. */
 static
 int readline_unbuf(int fd, char *buffer, size_t maxlen)
 {
@@ -89,9 +95,13 @@
 			ret = -1;
 			goto end;
 		}
+
+		rcu_thread_offline();
 		do {
 			len = read(fd, &key, sizeof(key));
 		} while (len < 0 && errno == EINTR);
+		rcu_thread_online();
+
 		if (len < 0) {
 			perror("read()");
 			ret = -1;
@@ -111,6 +121,7 @@
 	return ret;
 }
 
+/* wait_for_key() is a RCU quiescent state. */
 static
 void wait_for_key(void)
 {
@@ -120,6 +131,7 @@
 	(void) getch(&key);
 }
 
+/* get_config_entry_uint64() is a RCU quiescent state. */
 static
 void get_config_entry_uint64(const char *name,
 		uint64_t *value)
@@ -253,7 +265,7 @@
 	struct animal parent;
 	struct urcu_game_config *config;
 
-	rcu_read_lock();
+	rcu_read_lock();	/* no-op */
 	config = urcu_game_config_get();
 	/*
 	 * When we create animal as god, we only care about animal type.
@@ -270,7 +282,7 @@
 		DBG("God create animal %d, return: %d",
 			type, ret);
 	}
-	rcu_read_unlock();
+	rcu_read_unlock();	/* no-op */
 }
 
 static
@@ -380,7 +392,13 @@
 	int ret;
 
 	CMM_STORE_SHARED(hide_output, 1);	/* hide normal output */
+	/*
+	 * print_output_mutex is held while synchronize_rcu() is called,
+	 * therefore, it should not be taken by an online thread.
+	 */
+	rcu_thread_offline();
 	pthread_mutex_lock(&print_output_mutex);
+	rcu_thread_online();
 
 	for (;;) {
 		show_menu();
diff -urN urcu-tutorial/urcu-game/worker-thread.c urcu-tutorial/urcu-game-qsbr/worker-thread.c
--- urcu-tutorial/urcu-game/worker-thread.c	2013-10-17 20:47:40.641587568 -0400
+++ urcu-tutorial/urcu-game-qsbr/worker-thread.c	2013-10-17 20:47:04.617637889 -0400
@@ -20,7 +20,7 @@
 #include <stdint.h>
 #include <inttypes.h>
 #include <string.h>
-#include <urcu.h>
+#include <urcu-qsbr.h>
 #include <urcu/uatomic.h>
 #include "worker-thread.h"
 #include "urcu-game.h"
@@ -49,7 +49,7 @@
 	DBG("do work: key1 %" PRIu64 ", key2 %" PRIu64,
 		work->first_key, work->second_key);
 
-	rcu_read_lock();
+	rcu_read_lock();	/* no-op */
 
 	first = find_animal(work->first_key);
 	second = find_animal(work->second_key);
@@ -77,7 +77,7 @@
 		DBG("mate success");
 
 end:
-	rcu_read_unlock();
+	rcu_read_unlock();	/* no-op */
 	return 0;
 }
 
@@ -97,6 +97,7 @@
 		struct cds_wfcq_node *node;
 		struct urcu_game_work *work;
 
+		rcu_quiescent_state();
 		node = __cds_wfcq_dequeue_blocking(&wt->q_head, &wt->q_tail);
 		if (!node) {
 			/* Wait for work */
@@ -184,6 +185,7 @@
 	return 0;
 }
 
+/* enqueue_work is a RCU quiescent state. */
 int enqueue_work(unsigned long thread_nr, struct urcu_game_work *work)
 {
 	struct worker_thread *worker;
@@ -196,10 +198,17 @@
 	/*
 	 * A single thread is pushing into the queue, this backoff
 	 * mechanism is sufficient.
+	 *
+	 * enqueue_work may block if worker queues are full. A
+	 * synchronize_rcu() in the worker thread could cause a deadlock
+	 * between synchronize_rcu (on worker thread) and the dispatcher
+	 * blocked on a full queue.
 	 */
+	rcu_thread_offline();
 	while (uatomic_read(&worker->q_len) >= MAX_WQ_LEN) {
 		poll(NULL, 0, 10);	/* sleep 10ms */
 	}
+	rcu_thread_online();
 
 	uatomic_inc(&worker->q_len);
 	cds_wfcq_node_init(&work->q_node);
